{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"rio-stac \u00b6 Create STAC Items from raster datasets. Documentation : developmentseed.github.io/rio-stac/ Source Code : developmentseed/rio-stac rio-stac is a simple rasterio plugin for creating valid STAC items from a raster dataset. The library is built on top of pystac to make sure we follow the STAC specification. Installation \u00b6 $ pip install pip -U # From Pypi $ pip install rio-stac # Or from source $ pip install git+http://github.com/developmentseed/rio-stac Contribution & Development \u00b6 See CONTRIBUTING.md Authors \u00b6 See contributors Changes \u00b6 See CHANGES.md . License \u00b6 See LICENSE","title":"Home"},{"location":"#rio-stac","text":"Create STAC Items from raster datasets. Documentation : developmentseed.github.io/rio-stac/ Source Code : developmentseed/rio-stac rio-stac is a simple rasterio plugin for creating valid STAC items from a raster dataset. The library is built on top of pystac to make sure we follow the STAC specification.","title":"rio-stac"},{"location":"#installation","text":"$ pip install pip -U # From Pypi $ pip install rio-stac # Or from source $ pip install git+http://github.com/developmentseed/rio-stac","title":"Installation"},{"location":"#contribution-development","text":"See CONTRIBUTING.md","title":"Contribution &amp; Development"},{"location":"#authors","text":"See contributors","title":"Authors"},{"location":"#changes","text":"See CHANGES.md .","title":"Changes"},{"location":"#license","text":"See LICENSE","title":"License"},{"location":"contributing/","text":"Contributing \u00b6 Issues and pull requests are more than welcome. dev install $ git clone https://github.com/developmentseed/rio-stac.git $ cd rio-stac $ pip install -e . [ dev ] pre-commit This repo is set to use pre-commit to run isort , flake8 , pydocstring , black (\"uncompromising Python code formatter\") and mypy when committing new code. $ pre-commit install Docs $ git clone https://github.com/developmentseed/rio-stac.git $ cd rio-stac $ pip install -e . [ \"docs\" ] Create API docs $ pdocs as_markdown --output_dir docs/api/ --exclude_source --overwrite rio_stac.stac Hot-reloading docs: $ mkdocs serve To manually deploy docs (note you should never need to do this because Github Actions deploys automatically for new commits.): $ mkdocs gh-deploy","title":"Development - Contributing"},{"location":"contributing/#contributing","text":"Issues and pull requests are more than welcome. dev install $ git clone https://github.com/developmentseed/rio-stac.git $ cd rio-stac $ pip install -e . [ dev ] pre-commit This repo is set to use pre-commit to run isort , flake8 , pydocstring , black (\"uncompromising Python code formatter\") and mypy when committing new code. $ pre-commit install Docs $ git clone https://github.com/developmentseed/rio-stac.git $ cd rio-stac $ pip install -e . [ \"docs\" ] Create API docs $ pdocs as_markdown --output_dir docs/api/ --exclude_source --overwrite rio_stac.stac Hot-reloading docs: $ mkdocs serve To manually deploy docs (note you should never need to do this because Github Actions deploys automatically for new commits.): $ mkdocs gh-deploy","title":"Contributing"},{"location":"intro/","text":"rio-stac can be used either from the command line as a rasterio plugin ( rio stac ) or from your own script. For more information about the Item specification, please see github.com/radiantearth/stac-spec/blob/master/item-spec/item-spec.md CLI \u00b6 $ rio stac --help Usage: rio stac [OPTIONS] INPUT Rasterio STAC plugin: Create a STAC Item for raster dataset. Options: -d, --datetime TEXT The date and time of the assets, in UTC (e.g 2020-01-01, 2020-01-01T01:01:01). -e, --extension TEXT STAC extensions the Item implements (default is set to [\"proj\"]). Multiple allowed (e.g. `-e extensionUrl1 -e extensionUrl2`). -c, --collection TEXT The Collection ID that this item belongs to. --collection-url TEXT Link to the STAC Collection. -p, --property NAME=VALUE Additional property to add (e.g `-p myprops=1`). Multiple allowed. --id TEXT Item id. -n, --asset-name TEXT Asset name. --asset-href TEXT Overwrite asset href. --asset-mediatype [COG|GEOJSON|GEOPACKAGE|GEOTIFF|HDF|HDF5|JPEG|JPEG2000|JSON|PNG|TEXT|TIFF|XML|auto] Asset media-type. --with-proj / --without-proj Add the projection extension and properties (default to True). --with-raster / --without-raster Add the raster extension and properties (default to True). -o, --output PATH Output file name --help Show this message and exit. How To \u00b6 The CLI can be run as is, just by passing a source raster data. You can also use options to customize the output STAC item: datetime (-d, --datetime) By design, all STAC items must have a datetime in their properties. By default the CLI will set the time to the actual UTC Time. The CLI will accept any format supported by dateparser . You can also define start_datetime and end_datetime by using --datetime {start}/{end} notation. extension (-e, --extension) STAC Item can have extensions which indicates that the item has additional properies (e.g proj information). This option can be set multiple times. You can pass the extension option multiple times: -e extension1 -e extension2 . projection extension (--with-proj / --without-proj) By default the projection extension and properties will be added to the item. link: stac-extensions/projection { \"proj:epsg\": 3857, \"proj:geometry\": {\"type\": \"Polygon\", \"coordinates\": [...]}, \"proj:bbox\": [..], \"proj:shape\": [8192, 8192], \"proj:transform\": [...], \"datetime\": \"2021-03-19T02:27:33.266356Z\" } You can pass --without-proj to disable it. raster extension (--with-raster / --without-raster) By default the raster extension and properties will be added to the item. link: stac-extensions/raster \"raster:bands\": [ { \"sampling\": \"point\", \"data_type\": \"uint16\", \"scale\": 1, \"offset\": 0, \"statistics\": { \"mean\": 2107.524612053134, \"minimum\": 1, \"maximum\": 7872, \"stdev\": 2271.0065537857326, \"valid_percent\": 9.564764936336924e-05 }, \"histogram\": { \"count\": 11, \"min\": 1, \"max\": 7872, \"buckets\": [503460, 0, 0, 161792, 283094, 0, 0, 0, 87727, 9431] } } ] You can pass --without-raster to disable it. collection (-c, --collection) Add a collection attribute to the item. collection link (--collection-url) When adding a collection to the Item, the specification state that a Link must also be set. By default the href will be set with the collection id. You can specify a custom URL using this option. properties (-p, --property) You can add multiple properties to the item using -p {KEY}={VALUE} notation. This option can be set multiple times. id (--id) STAC Item id to set. Default to the source basename. asset name (-n, --asset-name) Name to use in the assets section. Default to asset . { \"asset\": { \"href\": \"raster.tif\" } } asset href (--asset-href) Overwrite the HREF in the asset object. Default to the source path. media type (--asset-mediatype) Set the asset mediatype . If set to auto , rio-stac will try to find the mediatype. Example \u00b6 $ rio s ta c ras ter . t i f | jq { \"type\" : \"Feature\" , \"stac_version\" : \"1.0.0-beta.2\" , \"id\" : \"raster.tif\" , \"properties\" : { \"proj:epsg\" : 3857 , \"proj:geometry\" : { \"type\" : \"Polygon\" , \"coordinates\" : [ ... ]}, \"proj:bbox\" : [ .. ], \"proj:shape\" : [ 8192 , 8192 ], \"proj:transform\" : [ ... ], \"datetime\" : \"2021-03-19T02:27:33.266356Z\" }, \"geometry\" : { \"type\" : \"Polygon\" , \"coordinates\" : [ ... ] }, \"links\" : [], \"assets\" : { \"asset\" : { \"href\" : \"raster.tif\" , \"raster:bands\" : [ { \"sampling\" : \"point\" , \"data_type\" : \"uint16\" , \"scale\" : 1 , \"offset\" : 0 , \"statistics\" : { \"mean\" : 2107.524612053134 , \"minimum\" : 1 , \"maximum\" : 7872 , \"stdev\" : 2271.0065537857326 , \"valid_percent\" : 9.564764936336924e-05 }, \"histogram\" : { \"count\" : 11 , \"min\" : 1 , \"max\" : 7872 , \"buckets\" : [ 503460 , 0 , 0 , 161792 , 283094 , 0 , 0 , 0 , 87727 , 9431 ] } } ], } }, \"bbox\" : [ ... ], \"stac_extensions\" : [ \"https://stac-extensions.github.io/projection/v1.0.0/schema.json\" , \"https://stac-extensions.github.io/raster/v1.0.0/schema.json\" ] } $ rio s ta c S -2 _ 20200422 _COG. t i f \\ - d 2020-04-22 \\ - c mypriva te collec t io n \\ - p comme nts : na me=my f ile \\ -- id COG \\ - n mosaic \\ -- asse t - hre f h tt ps : //somewhere.over t herai n bow.io/S -2 _ 20200422 _COG. t i f \\ -- asse t - media t ype COG | jq { \"type\" : \"Feature\" , \"stac_version\" : \"1.0.0\" , \"id\" : \"COG\" , \"properties\" : { \"comments:name\" : \"myfile\" , \"proj:epsg\" : 32632 , \"proj:geometry\" : { \"type\" : \"Polygon\" , \"coordinates\" : [ [ [ 342765 , 5971585 ], [ 342765 , 5682885 ], [ 674215 , 5682885 ], [ 674215 , 5971585 ], [ 342765 , 5971585 ] ] ] }, \"proj:bbox\" : [ 342765 , 5682885 , 674215 , 5971585 ], \"proj:shape\" : [ 28870 , 33145 ], \"proj:transform\" : [ 10 , 0 , 342765 , 0 , -10 , 5971585 , 0 , 0 , 1 ], \"datetime\" : \"2020-04-22T00:00:00Z\" }, \"geometry\" : { \"type\" : \"Polygon\" , \"coordinates\" : [ [ [ 6.608576517072109 , 53.89267160832536 ], [ 6.608576517072109 , 51.270642883468916 ], [ 11.64938680867944 , 51.270642883468916 ], [ 11.64938680867944 , 53.89267160832536 ], [ 6.608576517072109 , 53.89267160832536 ] ] ] }, \"links\" : [ { \"rel\" : \"collection\" , \"href\" : \"myprivatecollection\" , \"type\" : \"application/json\" } ], \"assets\" : { \"mosaic\" : { \"href\" : \"https://somewhere.overtherainbow.io/S-2_20200422_COG.tif\" , \"type\" : \"image/tiff; application=geotiff; profile=cloud-optimized\" , \"raster:bands\" : [ { \"sampling\" : \"area\" , \"data_type\" : \"uint8\" , \"scale\" : 1 , \"offset\" : 0 , \"statistics\" : { \"mean\" : 70.14680057905686 , \"minimum\" : 0 , \"maximum\" : 255 , \"stdev\" : 36.47197403839734 , \"valid_percent\" : 49.83785997057175 }, \"histogram\" : { \"count\" : 11 , \"min\" : 0 , \"max\" : 255 , \"buckets\" : [ 21135 , 129816 , 152194 , 76363 , 39423 , 20046 , 10272 , 3285 , 1115 , 1574 ] } }, { \"sampling\" : \"area\" , \"data_type\" : \"uint8\" , \"scale\" : 1 , \"offset\" : 0 , \"statistics\" : { \"mean\" : 70.72913714816694 , \"minimum\" : 0 , \"maximum\" : 255 , \"stdev\" : 34.031434334640124 , \"valid_percent\" : 49.83785997057175 }, \"histogram\" : { \"count\" : 11 , \"min\" : 0 , \"max\" : 255 , \"buckets\" : [ 14829 , 116732 , 171933 , 81023 , 38736 , 18977 , 8362 , 2259 , 918 , 1454 ] } }, { \"sampling\" : \"area\" , \"data_type\" : \"uint8\" , \"scale\" : 1 , \"offset\" : 0 , \"statistics\" : { \"mean\" : 47.96346845392258 , \"minimum\" : 0 , \"maximum\" : 255 , \"stdev\" : 32.447819767110225 , \"valid_percent\" : 49.83785997057175 }, \"histogram\" : { \"count\" : 11 , \"min\" : 0 , \"max\" : 255 , \"buckets\" : [ 110478 , 177673 , 93767 , 41101 , 20804 , 7117 , 1939 , 856 , 829 , 659 ] } } ], } }, \"bbox\" : [ 6.608576517072109 , 51.270642883468916 , 11.64938680867944 , 53.89267160832536 ], \"stac_extensions\" : [ \"https://stac-extensions.github.io/projection/v1.0.0/schema.json\" , \"https://stac-extensions.github.io/raster/v1.0.0/schema.json\" ], \"collection\" : \"myprivatecollection\" } API \u00b6 see: api","title":"User Guide"},{"location":"intro/#cli","text":"$ rio stac --help Usage: rio stac [OPTIONS] INPUT Rasterio STAC plugin: Create a STAC Item for raster dataset. Options: -d, --datetime TEXT The date and time of the assets, in UTC (e.g 2020-01-01, 2020-01-01T01:01:01). -e, --extension TEXT STAC extensions the Item implements (default is set to [\"proj\"]). Multiple allowed (e.g. `-e extensionUrl1 -e extensionUrl2`). -c, --collection TEXT The Collection ID that this item belongs to. --collection-url TEXT Link to the STAC Collection. -p, --property NAME=VALUE Additional property to add (e.g `-p myprops=1`). Multiple allowed. --id TEXT Item id. -n, --asset-name TEXT Asset name. --asset-href TEXT Overwrite asset href. --asset-mediatype [COG|GEOJSON|GEOPACKAGE|GEOTIFF|HDF|HDF5|JPEG|JPEG2000|JSON|PNG|TEXT|TIFF|XML|auto] Asset media-type. --with-proj / --without-proj Add the projection extension and properties (default to True). --with-raster / --without-raster Add the raster extension and properties (default to True). -o, --output PATH Output file name --help Show this message and exit.","title":"CLI"},{"location":"intro/#how-to","text":"The CLI can be run as is, just by passing a source raster data. You can also use options to customize the output STAC item: datetime (-d, --datetime) By design, all STAC items must have a datetime in their properties. By default the CLI will set the time to the actual UTC Time. The CLI will accept any format supported by dateparser . You can also define start_datetime and end_datetime by using --datetime {start}/{end} notation. extension (-e, --extension) STAC Item can have extensions which indicates that the item has additional properies (e.g proj information). This option can be set multiple times. You can pass the extension option multiple times: -e extension1 -e extension2 . projection extension (--with-proj / --without-proj) By default the projection extension and properties will be added to the item. link: stac-extensions/projection { \"proj:epsg\": 3857, \"proj:geometry\": {\"type\": \"Polygon\", \"coordinates\": [...]}, \"proj:bbox\": [..], \"proj:shape\": [8192, 8192], \"proj:transform\": [...], \"datetime\": \"2021-03-19T02:27:33.266356Z\" } You can pass --without-proj to disable it. raster extension (--with-raster / --without-raster) By default the raster extension and properties will be added to the item. link: stac-extensions/raster \"raster:bands\": [ { \"sampling\": \"point\", \"data_type\": \"uint16\", \"scale\": 1, \"offset\": 0, \"statistics\": { \"mean\": 2107.524612053134, \"minimum\": 1, \"maximum\": 7872, \"stdev\": 2271.0065537857326, \"valid_percent\": 9.564764936336924e-05 }, \"histogram\": { \"count\": 11, \"min\": 1, \"max\": 7872, \"buckets\": [503460, 0, 0, 161792, 283094, 0, 0, 0, 87727, 9431] } } ] You can pass --without-raster to disable it. collection (-c, --collection) Add a collection attribute to the item. collection link (--collection-url) When adding a collection to the Item, the specification state that a Link must also be set. By default the href will be set with the collection id. You can specify a custom URL using this option. properties (-p, --property) You can add multiple properties to the item using -p {KEY}={VALUE} notation. This option can be set multiple times. id (--id) STAC Item id to set. Default to the source basename. asset name (-n, --asset-name) Name to use in the assets section. Default to asset . { \"asset\": { \"href\": \"raster.tif\" } } asset href (--asset-href) Overwrite the HREF in the asset object. Default to the source path. media type (--asset-mediatype) Set the asset mediatype . If set to auto , rio-stac will try to find the mediatype.","title":"How To"},{"location":"intro/#example","text":"$ rio s ta c ras ter . t i f | jq { \"type\" : \"Feature\" , \"stac_version\" : \"1.0.0-beta.2\" , \"id\" : \"raster.tif\" , \"properties\" : { \"proj:epsg\" : 3857 , \"proj:geometry\" : { \"type\" : \"Polygon\" , \"coordinates\" : [ ... ]}, \"proj:bbox\" : [ .. ], \"proj:shape\" : [ 8192 , 8192 ], \"proj:transform\" : [ ... ], \"datetime\" : \"2021-03-19T02:27:33.266356Z\" }, \"geometry\" : { \"type\" : \"Polygon\" , \"coordinates\" : [ ... ] }, \"links\" : [], \"assets\" : { \"asset\" : { \"href\" : \"raster.tif\" , \"raster:bands\" : [ { \"sampling\" : \"point\" , \"data_type\" : \"uint16\" , \"scale\" : 1 , \"offset\" : 0 , \"statistics\" : { \"mean\" : 2107.524612053134 , \"minimum\" : 1 , \"maximum\" : 7872 , \"stdev\" : 2271.0065537857326 , \"valid_percent\" : 9.564764936336924e-05 }, \"histogram\" : { \"count\" : 11 , \"min\" : 1 , \"max\" : 7872 , \"buckets\" : [ 503460 , 0 , 0 , 161792 , 283094 , 0 , 0 , 0 , 87727 , 9431 ] } } ], } }, \"bbox\" : [ ... ], \"stac_extensions\" : [ \"https://stac-extensions.github.io/projection/v1.0.0/schema.json\" , \"https://stac-extensions.github.io/raster/v1.0.0/schema.json\" ] } $ rio s ta c S -2 _ 20200422 _COG. t i f \\ - d 2020-04-22 \\ - c mypriva te collec t io n \\ - p comme nts : na me=my f ile \\ -- id COG \\ - n mosaic \\ -- asse t - hre f h tt ps : //somewhere.over t herai n bow.io/S -2 _ 20200422 _COG. t i f \\ -- asse t - media t ype COG | jq { \"type\" : \"Feature\" , \"stac_version\" : \"1.0.0\" , \"id\" : \"COG\" , \"properties\" : { \"comments:name\" : \"myfile\" , \"proj:epsg\" : 32632 , \"proj:geometry\" : { \"type\" : \"Polygon\" , \"coordinates\" : [ [ [ 342765 , 5971585 ], [ 342765 , 5682885 ], [ 674215 , 5682885 ], [ 674215 , 5971585 ], [ 342765 , 5971585 ] ] ] }, \"proj:bbox\" : [ 342765 , 5682885 , 674215 , 5971585 ], \"proj:shape\" : [ 28870 , 33145 ], \"proj:transform\" : [ 10 , 0 , 342765 , 0 , -10 , 5971585 , 0 , 0 , 1 ], \"datetime\" : \"2020-04-22T00:00:00Z\" }, \"geometry\" : { \"type\" : \"Polygon\" , \"coordinates\" : [ [ [ 6.608576517072109 , 53.89267160832536 ], [ 6.608576517072109 , 51.270642883468916 ], [ 11.64938680867944 , 51.270642883468916 ], [ 11.64938680867944 , 53.89267160832536 ], [ 6.608576517072109 , 53.89267160832536 ] ] ] }, \"links\" : [ { \"rel\" : \"collection\" , \"href\" : \"myprivatecollection\" , \"type\" : \"application/json\" } ], \"assets\" : { \"mosaic\" : { \"href\" : \"https://somewhere.overtherainbow.io/S-2_20200422_COG.tif\" , \"type\" : \"image/tiff; application=geotiff; profile=cloud-optimized\" , \"raster:bands\" : [ { \"sampling\" : \"area\" , \"data_type\" : \"uint8\" , \"scale\" : 1 , \"offset\" : 0 , \"statistics\" : { \"mean\" : 70.14680057905686 , \"minimum\" : 0 , \"maximum\" : 255 , \"stdev\" : 36.47197403839734 , \"valid_percent\" : 49.83785997057175 }, \"histogram\" : { \"count\" : 11 , \"min\" : 0 , \"max\" : 255 , \"buckets\" : [ 21135 , 129816 , 152194 , 76363 , 39423 , 20046 , 10272 , 3285 , 1115 , 1574 ] } }, { \"sampling\" : \"area\" , \"data_type\" : \"uint8\" , \"scale\" : 1 , \"offset\" : 0 , \"statistics\" : { \"mean\" : 70.72913714816694 , \"minimum\" : 0 , \"maximum\" : 255 , \"stdev\" : 34.031434334640124 , \"valid_percent\" : 49.83785997057175 }, \"histogram\" : { \"count\" : 11 , \"min\" : 0 , \"max\" : 255 , \"buckets\" : [ 14829 , 116732 , 171933 , 81023 , 38736 , 18977 , 8362 , 2259 , 918 , 1454 ] } }, { \"sampling\" : \"area\" , \"data_type\" : \"uint8\" , \"scale\" : 1 , \"offset\" : 0 , \"statistics\" : { \"mean\" : 47.96346845392258 , \"minimum\" : 0 , \"maximum\" : 255 , \"stdev\" : 32.447819767110225 , \"valid_percent\" : 49.83785997057175 }, \"histogram\" : { \"count\" : 11 , \"min\" : 0 , \"max\" : 255 , \"buckets\" : [ 110478 , 177673 , 93767 , 41101 , 20804 , 7117 , 1939 , 856 , 829 , 659 ] } } ], } }, \"bbox\" : [ 6.608576517072109 , 51.270642883468916 , 11.64938680867944 , 53.89267160832536 ], \"stac_extensions\" : [ \"https://stac-extensions.github.io/projection/v1.0.0/schema.json\" , \"https://stac-extensions.github.io/raster/v1.0.0/schema.json\" ], \"collection\" : \"myprivatecollection\" }","title":"Example"},{"location":"intro/#api","text":"see: api","title":"API"},{"location":"release-notes/","text":"0.3.0 (2021-09-10) \u00b6 Move raster:bands information in assets (not in properties). update pystac version fix typo for stddev raster information drop support of python 3.6 (pystac 1.0.0 dropped support of python 3.6) 0.2.1 (2021-08-24) \u00b6 use WarpedVRT for data with internal GCPS 0.2.0 (2021-07-06) \u00b6 fix validation issue with Collection and extension for STAC 1.0.0 add collection_url option to customize the collection link add raster extension option ( developmentseed/rio-stac!12 ) set proj:epsg value to None when no CRS is found in the dataset. breaking changes update pystac version to >=1.0.0rc1 use full URL for extension add Collection Link when adding a collection add with_proj (--with-proj/--without-proj in the CLI) in create_stac_item to add the extension and proj properties in the stac items (will do the same for the raster extension) 0.1.1 (2021-03-19) \u00b6 fix CLI asset-href default 0.1.0 (2021-03-19) \u00b6 Initial release. Design API add CLI add tests write docs","title":"Release Notes"},{"location":"release-notes/#030-2021-09-10","text":"Move raster:bands information in assets (not in properties). update pystac version fix typo for stddev raster information drop support of python 3.6 (pystac 1.0.0 dropped support of python 3.6)","title":"0.3.0 (2021-09-10)"},{"location":"release-notes/#021-2021-08-24","text":"use WarpedVRT for data with internal GCPS","title":"0.2.1 (2021-08-24)"},{"location":"release-notes/#020-2021-07-06","text":"fix validation issue with Collection and extension for STAC 1.0.0 add collection_url option to customize the collection link add raster extension option ( developmentseed/rio-stac!12 ) set proj:epsg value to None when no CRS is found in the dataset. breaking changes update pystac version to >=1.0.0rc1 use full URL for extension add Collection Link when adding a collection add with_proj (--with-proj/--without-proj in the CLI) in create_stac_item to add the extension and proj properties in the stac items (will do the same for the raster extension)","title":"0.2.0 (2021-07-06)"},{"location":"release-notes/#011-2021-03-19","text":"fix CLI asset-href default","title":"0.1.1 (2021-03-19)"},{"location":"release-notes/#010-2021-03-19","text":"Initial release. Design API add CLI add tests write docs","title":"0.1.0 (2021-03-19)"},{"location":"api/rio_stac/stac/","text":"Module rio_stac.stac \u00b6 Create STAC Item from a rasterio dataset. None Variables \u00b6 PROJECTION_EXT_VERSION RASTER_EXT_VERSION Functions \u00b6 bbox_to_geom \u00b6 def bbox_to_geom ( bbox : Tuple [ float , float , float , float ] ) -> Dict Return a geojson geometry from a bbox. create_stac_item \u00b6 def create_stac_item ( source : Union [ str , rasterio . io . DatasetReader , rasterio . io . DatasetWriter , rasterio . vrt . WarpedVRT , rasterio . io . MemoryFile ], input_datetime : Union [ datetime . datetime , NoneType ] = None , extensions : Union [ List [ str ], NoneType ] = None , collection : Union [ str , NoneType ] = None , collection_url : Union [ str , NoneType ] = None , properties : Union [ Dict , NoneType ] = None , id : Union [ str , NoneType ] = None , assets : Union [ Dict [ str , pystac . asset . Asset ], NoneType ] = None , asset_name : str = 'asset' , asset_roles : Union [ List [ str ], NoneType ] = None , asset_media_type : Union [ str , pystac . media_type . MediaType , NoneType ] = None , asset_href : Union [ str , NoneType ] = None , with_proj : bool = False , with_raster : bool = False , raster_max_size : int = 1024 ) -> pystac . item . Item Create a Stac Item. Parameters: Name Type Description Default source str or opened rasterio dataset input path or rasterio dataset. None input_datetime datetime.datetime datetime associated with the item. None extensions list of str input list of extensions to use in the item. None collection str name of collection the item belongs to. None collection_url str Link to the STAC Collection. None properties dict additional properties to add in the item. None id str id to assign to the item (default to the source basename). None assets dict Assets to set in the item. If set we won't create one from the source. None asset_name str asset name in the Assets object. None asset_roles list of str list of str list of asset's roles. asset_media_type str or pystac.MediaType asset's media type. None asset_href str asset's URI (default to input path). None with_proj bool Add the projection extension and properties (default to False). None with_raster bool Add the raster extension and properties (default to False). None raster_max_size int Limit array size from which to get the raster statistics, This is used to reduce data transfer. Defaults to 1024. 1024 Returns: Type Description pystac.Item valid STAC Item. get_media_type \u00b6 def get_media_type ( src_dst : Union [ rasterio . io . DatasetReader , rasterio . io . DatasetWriter , rasterio . vrt . WarpedVRT , rasterio . io . MemoryFile ] ) -> Union [ pystac . media_type . MediaType , NoneType ] Find MediaType for a raster dataset. get_metadata \u00b6 def get_metadata ( src_dst : Union [ rasterio . io . DatasetReader , rasterio . io . DatasetWriter , rasterio . vrt . WarpedVRT , rasterio . io . MemoryFile ] ) -> Dict Get Raster Metadata. get_projection_info \u00b6 def get_projection_info ( src_dst : Union [ rasterio . io . DatasetReader , rasterio . io . DatasetWriter , rasterio . vrt . WarpedVRT , rasterio . io . MemoryFile ] ) -> Dict Get projection metadata. see: github.com/stac-extensions/projection/#item-properties-or-asset-fields get_raster_info \u00b6 def get_raster_info ( src_dst : Union [ rasterio . io . DatasetReader , rasterio . io . DatasetWriter , rasterio . vrt . WarpedVRT , rasterio . io . MemoryFile ], max_size : int = 1024 ) -> List [ Dict ] Get raster metadata. see: stac-extensions/raster#raster-band-object","title":"rio_stac.stac"},{"location":"api/rio_stac/stac/#module-rio_stacstac","text":"Create STAC Item from a rasterio dataset. None","title":"Module rio_stac.stac"},{"location":"api/rio_stac/stac/#variables","text":"PROJECTION_EXT_VERSION RASTER_EXT_VERSION","title":"Variables"},{"location":"api/rio_stac/stac/#functions","text":"","title":"Functions"},{"location":"api/rio_stac/stac/#bbox_to_geom","text":"def bbox_to_geom ( bbox : Tuple [ float , float , float , float ] ) -> Dict Return a geojson geometry from a bbox.","title":"bbox_to_geom"},{"location":"api/rio_stac/stac/#create_stac_item","text":"def create_stac_item ( source : Union [ str , rasterio . io . DatasetReader , rasterio . io . DatasetWriter , rasterio . vrt . WarpedVRT , rasterio . io . MemoryFile ], input_datetime : Union [ datetime . datetime , NoneType ] = None , extensions : Union [ List [ str ], NoneType ] = None , collection : Union [ str , NoneType ] = None , collection_url : Union [ str , NoneType ] = None , properties : Union [ Dict , NoneType ] = None , id : Union [ str , NoneType ] = None , assets : Union [ Dict [ str , pystac . asset . Asset ], NoneType ] = None , asset_name : str = 'asset' , asset_roles : Union [ List [ str ], NoneType ] = None , asset_media_type : Union [ str , pystac . media_type . MediaType , NoneType ] = None , asset_href : Union [ str , NoneType ] = None , with_proj : bool = False , with_raster : bool = False , raster_max_size : int = 1024 ) -> pystac . item . Item Create a Stac Item. Parameters: Name Type Description Default source str or opened rasterio dataset input path or rasterio dataset. None input_datetime datetime.datetime datetime associated with the item. None extensions list of str input list of extensions to use in the item. None collection str name of collection the item belongs to. None collection_url str Link to the STAC Collection. None properties dict additional properties to add in the item. None id str id to assign to the item (default to the source basename). None assets dict Assets to set in the item. If set we won't create one from the source. None asset_name str asset name in the Assets object. None asset_roles list of str list of str list of asset's roles. asset_media_type str or pystac.MediaType asset's media type. None asset_href str asset's URI (default to input path). None with_proj bool Add the projection extension and properties (default to False). None with_raster bool Add the raster extension and properties (default to False). None raster_max_size int Limit array size from which to get the raster statistics, This is used to reduce data transfer. Defaults to 1024. 1024 Returns: Type Description pystac.Item valid STAC Item.","title":"create_stac_item"},{"location":"api/rio_stac/stac/#get_media_type","text":"def get_media_type ( src_dst : Union [ rasterio . io . DatasetReader , rasterio . io . DatasetWriter , rasterio . vrt . WarpedVRT , rasterio . io . MemoryFile ] ) -> Union [ pystac . media_type . MediaType , NoneType ] Find MediaType for a raster dataset.","title":"get_media_type"},{"location":"api/rio_stac/stac/#get_metadata","text":"def get_metadata ( src_dst : Union [ rasterio . io . DatasetReader , rasterio . io . DatasetWriter , rasterio . vrt . WarpedVRT , rasterio . io . MemoryFile ] ) -> Dict Get Raster Metadata.","title":"get_metadata"},{"location":"api/rio_stac/stac/#get_projection_info","text":"def get_projection_info ( src_dst : Union [ rasterio . io . DatasetReader , rasterio . io . DatasetWriter , rasterio . vrt . WarpedVRT , rasterio . io . MemoryFile ] ) -> Dict Get projection metadata. see: github.com/stac-extensions/projection/#item-properties-or-asset-fields","title":"get_projection_info"},{"location":"api/rio_stac/stac/#get_raster_info","text":"def get_raster_info ( src_dst : Union [ rasterio . io . DatasetReader , rasterio . io . DatasetWriter , rasterio . vrt . WarpedVRT , rasterio . io . MemoryFile ], max_size : int = 1024 ) -> List [ Dict ] Get raster metadata. see: stac-extensions/raster#raster-band-object","title":"get_raster_info"}]}